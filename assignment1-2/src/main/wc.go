package main

import (
	"fmt"
	"log"
	"mapreduce"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"unicode"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func wcMapF(document string, value string) (res []mapreduce.KeyValue) {
	fmt.Printf("%s: map phase\n", document)

	wordCountCache := make(map[string]int)

	// Separate all of the words in the document using non-letters as separators
	words := strings.FieldsFunc(value, func(r rune) bool {
		return !unicode.IsLetter(r)
	})

	for _, w := range words {

		// If we don't have a record of the word in our cache, initialize its record
		if _, alreadyExists := wordCountCache[w]; !alreadyExists {
			wordCountCache[w] = 0
		}

		wordCountCache[w] = wordCountCache[w] + 1
	}

	// Encapsulate word cache counts in mapreduce.KeyValue structs
	for word, count := range wordCountCache {
		kv := mapreduce.KeyValue{Key: word, Value: strconv.Itoa(count)}
		res = append(res, kv)
	}

	return
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func wcReduceF(key string, values []string) string {
	fmt.Printf("%s: reduce phase\n", key)
	totalWordSum := 0

	for _, partialCountStr := range values {
		partialCount, _ := strconv.Atoi(partialCountStr)
		totalWordSum += partialCount
	}

	return strconv.Itoa(totalWordSum)
}

// getFilesInArgs expands file globs if any.
// If there is an element that is not a glob, it will be returned as-is.
// It returns a list of all filenames in fileArgs after properly expanding glob patterns, if there were any.
func getFilesInArgs(fileArgs []string) []string {
	var files []string

	for _, arg := range fileArgs {

		if strings.Contains(arg, "*") {
			globFiles, err := filepath.Glob(arg)
			checkError(err)
			files = append(files, globFiles...)
		} else {
			files = append(files, arg)
		}
	}
	return files
}

// Propagate error if it exists
func checkError(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master

		// We'll call getFilesInArgs to make sure that we expand file globs such as pg-*.txt to all individual
		//  files properly.

		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", getFilesInArgs(os.Args[3:]), 3, wcMapF, wcReduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", getFilesInArgs(os.Args[3:]), 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], wcMapF, wcReduceF, 100)
	}
}
